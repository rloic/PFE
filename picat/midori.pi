import sat. % use "import mip" instead of "import sat" to solve with MIP (Gurobi) instead of SAT
% Midori 128 : 20 rounds
% Midori 64 : 16 rounds

step1(R,ObjStep1) =>
    model(R, ObjStep1, DX, DY, DZ, DK),
    solve_all([DX[I,J,K] : I in 1..R, J in 1..4, K in 1..4]) = Solutions,
    write(len(Solutions)), print("\n"). % suppress "len" to print solutions (instead of printing the number of solutions)

model(R, ObjStep1, DX, DY, DZ, DK) =>
% KC = number of columns in the key, R = number of rounds, ObjStep1 = number of active Sboxes,
% DX = differences in the text, DK = differences in the key, LXor = list of xors inferred from the key schedule
    DX = new_array(R,4,4), DX :: 0..1,
    DY = new_array(R-1,4,4),
    DZ = new_array(R-1,4,4), DZ :: 0..1,
    DK = new_array(4,4), DK :: 0..1,
    DIFFY = new_array(R-1,4,4,R-1), DIFFY :: 0..1,
    DIFFZ = new_array(R-1,4,4,R-1), DIFFZ :: 0..1,
    foreach(I in 1..R-1, J in 1..4, K in 1..4)  %%% Add Round Key constraint
        DZ[I,J,K] + DK[J,K] + DX[I+1,J,K] #!= 1
    end,
    foreach(I in 1..R-1)                        %%% Shuffle cells constraint (tester en inversant lignes et colonnes ?)
        DY[I,1,1] = DX[I,1,1],
        DY[I,2,1] = DX[I,3,3],
        DY[I,3,1] = DX[I,2,2],
        DY[I,4,1] = DX[I,4,4],

        DY[I,1,2] = DX[I,3,4],
        DY[I,2,2] = DX[I,1,2],
        DY[I,3,2] = DX[I,4,3],
        DY[I,4,2] = DX[I,2,1],

        DY[I,1,3] = DX[I,2,3],
        DY[I,2,3] = DX[I,4,1],
        DY[I,3,3] = DX[I,1,4],
        DY[I,4,3] = DX[I,3,2],

        DY[I,1,4] = DX[I,4,2],
        DY[I,2,4] = DX[I,2,4],
        DY[I,3,4] = DX[I,3,1],
        DY[I,4,4] = DX[I,1,3]
    end,
    foreach(I in 1..R-1, K in 1..4) %%% Mix Columns constraint (C5')
        DY[I,2,K] + DY[I,3,K] + DY[I,4,K] + DZ[I,1,K] #!= 1,
        DY[I,1,K] + DY[I,3,K] + DY[I,4,K] + DZ[I,2,K] #!= 1,
        DY[I,1,K] + DY[I,2,K] + DY[I,4,K] + DZ[I,3,K] #!= 1,
        DY[I,1,K] + DY[I,2,K] + DY[I,3,K] + DZ[I,4,K] #!= 1
    end,
    foreach(I in 1..R-1, K in 1..4)
        S :: [0,4,5,6,7,8],
        sum([DY[I,J,K] : J in 1..4]) + sum([DZ[I,J,K] : J in 1..4]) #= S,
        (sum([DZ[I,J,K] : J in 1..4]) #= 0) #<=> (sum([DY[I,J,K] : J in 1..4]) #=0)
    end,
    foreach(I1 in 1..R-1, J in 1..4, K in 1..4, I2 in 1..I1-1)
        DY[I1,J,K] + DY[I2,J,K] + DIFFY[I1,J,K,I2] #!= 1,
        DZ[I1,J,K] + DZ[I2,J,K] + DIFFZ[I1,J,K,I2] #!= 1,
        DIFFZ[I1,J,K,I2] + DX[I1+1,J,K] + DX[I2+1,J,K] #!=1,
        DIFFZ[I1,J,K,I2] = DIFFZ[I2,J,K,I1],
        DIFFY[I1,J,K,I2] = DIFFY[I2,J,K,I1],
        foreach(I3 in 1..I2-1)
            DIFFY[I1,J,K,I2] + DIFFY[I2,J,K,I3] + DIFFY[I1,J,K,I3] #!= 1,
            DIFFZ[I1,J,K,I2] + DIFFZ[I2,J,K,I3] + DIFFZ[I1,J,K,I3] #!= 1
        end
    end,
    foreach(I1 in 1..R-1, K in 1..4, I2 in I1+1..R-1)
        S2 :: [0,4,5,6,7,8],                                    %%% MDS property (C12')
        sum([DIFFY[I1,J,K,I2] : J in 1..4]) + sum([DIFFZ[I1,J,K,I2] : J in 1..4]) #= S2
    end,
    sum([DX[I,J,K] : I in 1..R, J in 1..4, K in 1..4]) #= ObjStep1.




